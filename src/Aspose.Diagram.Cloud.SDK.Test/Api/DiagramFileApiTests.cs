/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.Diagram.Cloud.SDK.Client;
using Aspose.Diagram.Cloud.SDK.Api;
using Aspose.Diagram.Cloud.SDK.Model;

namespace Aspose.Diagram.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing DiagramFileApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DiagramFileApiTests : DiagramBaseTest
    {
        private DiagramFileApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DiagramFileApi(GetConfiguration());
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DiagramFileApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DiagramFileApi
            Assert.IsInstanceOf(typeof(DiagramFileApi), instance, "instance is a DiagramFileApi");
        }


        /// <summary>
        /// Test DiagramFileGetDiagram
        /// </summary>
        [Test]
        public void DiagramFileGetDiagramTest()
        {
            string name = File_TEST_GET;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.DiagramFileGetDiagram(name, "pdf", folder);
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test DiagramFilePostSaveAs
        /// </summary>
        [Test]
        public void DiagramFilePostSaveAsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = File_TEST_GET;
            bool isOverwrite = true;
            string folder = TEMPFOLDER;

            FileFormatRequest format = new FileFormatRequest() { Format = "pdf" };
            string newfilename = "file_saveas_1.pdf";

            UpdateDataFile(folder, name);
            var response = instance.DiagramFilePostSaveAs(name, format, newfilename, folder, isOverwrite);
            Assert.IsInstanceOf<SaveResponse>(response, "response is SaveResponse");
            Assert.AreEqual(response.Code, 200);
        }

        /// <summary>
        /// Test DiagramFilePutCreate
        /// </summary>
        [Test]
        public void DiagramFilePutCreateTest()
        {
            string name = File_TEST_GET;
            bool isOverwrite = true;
            string folder = TEMPFOLDER;

            var response = instance.DiagramFilePutCreate(name, folder, isOverwrite);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");

            Assert.AreEqual(response.Code, 200);
        }

        /// <summary>
        /// Test DiagramFilePutCreate
        /// </summary>
        [Test]
        public void DiagramFilePutUploadTest()
        {
            string name = "file_upload_new_C#.png";
            bool isOverwrite = true;
            string folder = TEMPFOLDER;
            string localFilePath = @"D:\work\01aspose\cloud\Aspose.Diagram.Cloud\diagram\testdata\Diagram\upload\123.vsd";
            var response = instance.DiagramFilePutUpload(localFilePath, name, folder, isOverwrite);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");

            Assert.AreEqual(response.Code, 200);
        }

    }

}
