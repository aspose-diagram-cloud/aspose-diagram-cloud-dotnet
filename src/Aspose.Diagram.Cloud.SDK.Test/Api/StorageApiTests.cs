/* 
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.Diagram.Cloud.SDK.Client;
using Aspose.Diagram.Cloud.SDK.Api;
using Aspose.Diagram.Cloud.SDK.Model;

namespace Aspose.Diagram.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing StorageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StorageApiTests : TestBase
    {
        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test DownloadFileTest
        /// </summary>
        [Test]
        public void DownloadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            Stream stream = GetTestDataStream(name);
            storageApi.UploadFile(name, stream);
            var response = storageApi.DownloadFile(name);
            Assert.IsInstanceOf<Stream>(response, "Download file.");
        }

        /// <summary>
        /// Test UploadFileTest
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            Stream stream = GetTestDataStream(name);
            var response = storageApi.UploadFile(StorageTestFOLDER + "\\" + name, stream);
            Assert.IsInstanceOf<FilesUploadResult>(response, "Upload file.");
            Assert.IsTrue(response.Uploaded.Count > 0);
        }

        /// <summary>
        /// Test DeleteFileTest
        /// </summary>
        [Test]
        public void DeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            storageApi.DeleteFile(StorageTestFOLDER + name);
        }

        /// <summary>
        /// Test CopyFileTest
        /// </summary>
        [Test]
        public void CopyFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            Stream stream = GetTestDataStream(name);
            storageApi.UploadFile(name, stream);
            string folder = StorageTestFOLDER;
            storageApi.CopyFile(name, StorageTestFOLDER + @"\" + name);
        }

        /// <summary>
        /// Test MoveFileTest
        /// </summary>
        [Test]
        public void MoveFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            Stream stream = GetTestDataStream(name);
            storageApi.UploadFile(name, stream);
            storageApi.DeleteFile(name + "2");
            storageApi.MoveFile(name, name + "2");
        }

        /// <summary>
        /// Test GetFilesListTest
        /// </summary>
        [Test]
        public void GetFilesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            var response = storageApi.GetFilesList(StorageTestFOLDER);
            Assert.IsInstanceOf<FilesList>(response, "Upload file.");
        }

        /// <summary>
        /// Test CreateAndDeleteFolderTest
        /// </summary>
        [Test]
        public void CreateAndDeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            storageApi.CreateFolder(StorageTestFOLDER + 1);

            storageApi.DeleteFolder(StorageTestFOLDER + 1);
        }

        /// <summary>
        /// Test CopyFolderTest
        /// </summary>
        [Test]
        public void CopyFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            storageApi.CopyFolder(StorageTestFOLDER, StorageTestFOLDER + 2);
        }

        /// <summary>
        /// Test MoveFolderTest
        /// </summary>
        [Test]
        public void MoveFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            storageApi.MoveFolder(StorageTestFOLDER + 2, StorageTestFOLDER + 3);
        }

        /// <summary>
        /// Test StorageExistsTest
        /// </summary>
        [Test]
        public void StorageExistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            var response = storageApi.StorageExists("Default App");
            Assert.IsInstanceOf<StorageExist>(response, "StorageExist.");
        }

        /// <summary>
        /// Test StorageExistsTest
        /// </summary>
        [Test]
        public void ObjectExistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = LocalTestSourceFile;
            string folder = StorageTestFOLDER;
            var response = storageApi.ObjectExists(name);
            Assert.IsInstanceOf<ObjectExist>(response, "StorageExist.");
        }

    }

}
