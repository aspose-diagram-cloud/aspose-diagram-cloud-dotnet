/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Diagram.Cloud.SDK.Client;
using Aspose.Diagram.Cloud.SDK.Model;
using System.IO;
using System.Net.Http;

namespace Aspose.Diagram.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDiagramFileApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Read document info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DiagramFileGetDiagram(string name, string format = null, string folder = null, string storage = null);

        /// <summary>
        /// Read document info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DiagramFileGetDiagramWithHttpInfo(string name, string format = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaveResponse</returns>
        SaveResponse DiagramFilePostSaveAs(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaveResponse</returns>
        ApiResponse<SaveResponse> DiagramFilePostSaveAsWithHttpInfo(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Create new diagram and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse DiagramFilePutCreate(string name, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Create new diagram and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> DiagramFilePutCreateWithHttpInfo(string name, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Upload file and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse DiagramFilePutUpload(string localFilePath, string name, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Upload file and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> DiagramFilePutUploadWithHttpInfo(string localFilePath, string name, string folder = null, bool? isOverwrite = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Read document info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DiagramFileGetDiagramAsync(string name, string format = null, string folder = null, string storage = null);

        /// <summary>
        /// Read document info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DiagramFileGetDiagramAsyncWithHttpInfo(string name, string format = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaveResponse</returns>
        System.Threading.Tasks.Task<SaveResponse> DiagramFilePostSaveAsAsync(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveResponse>> DiagramFilePostSaveAsAsyncWithHttpInfo(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Create new diagram and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> DiagramFilePutCreateAsync(string name, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Create new diagram and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DiagramFilePutCreateAsyncWithHttpInfo(string name, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Upload file and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> DiagramFilePutUploadAsync(string name, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Upload file and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DiagramFilePutUploadAsyncWithHttpInfo(string name, string folder = null, bool? isOverwrite = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DiagramFileApi : IDiagramFileApi
    {
        private Aspose.Diagram.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramFileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DiagramFileApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Diagram.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramFileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DiagramFileApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath), headerParameters);

            ExceptionFactory = Aspose.Diagram.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramFileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DiagramFileApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Diagram.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiagramFileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DiagramFileApi(String grantType, String appSID, String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration = new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Diagram.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Diagram.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Read document info or export. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DiagramFileGetDiagram(string name, string format = null, string folder = null, string storage = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = DiagramFileGetDiagramWithHttpInfo(name, format, folder, storage);
            return localVarResponse.Data;
        }


        /// <summary>
        /// Read document info or export. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DiagramFileGetDiagramWithHttpInfo(string name, string format = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFileGetDiagram");

            var localVarPath = "/diagram/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFileGetDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document info or export. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DiagramFileGetDiagramAsync(string name, string format = null, string folder = null, string storage = null)
        {
            ApiResponse<System.IO.Stream> localVarResponse = await DiagramFileGetDiagramAsyncWithHttpInfo(name, format, folder, storage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Read document info or export. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DiagramFileGetDiagramAsyncWithHttpInfo(string name, string format = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFileGetDiagram");

            var localVarPath = "/diagram/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFileGetDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream)Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaveResponse</returns>
        public SaveResponse DiagramFilePostSaveAs(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            ApiResponse<SaveResponse> localVarResponse = DiagramFilePostSaveAsWithHttpInfo(name, format, newfilename, folder, isOverwrite, storage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaveResponse</returns>
        public ApiResponse<SaveResponse> DiagramFilePostSaveAsWithHttpInfo(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFilePostSaveAs");

            var localVarPath = "/diagram/{name}/SaveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (format != null && format.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(format); // http body (model) parameter
            }
            else
            {
                localVarPostBody = format; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFilePostSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaveResponse</returns>
        public async System.Threading.Tasks.Task<SaveResponse> DiagramFilePostSaveAsAsync(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            ApiResponse<SaveResponse> localVarResponse = await DiagramFilePostSaveAsAsyncWithHttpInfo(name, format, newfilename, folder, isOverwrite, storage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">Save format. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaveResponse>> DiagramFilePostSaveAsAsyncWithHttpInfo(string name, FileFormatRequest format = null, string newfilename = null, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFilePostSaveAs");

            var localVarPath = "/diagram/{name}/SaveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (format != null && format.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(format); // http body (model) parameter
            }
            else
            {
                localVarPostBody = format; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFilePostSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

        /// <summary>
        /// Create new diagram and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse DiagramFilePutCreate(string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            ApiResponse<SaaSposeResponse> localVarResponse = DiagramFilePutCreateWithHttpInfo(name, folder, isOverwrite, storage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new diagram and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse<SaaSposeResponse> DiagramFilePutCreateWithHttpInfo(string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFilePutCreate");

            var localVarPath = "/diagram/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFilePutCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Create new diagram and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> DiagramFilePutCreateAsync(string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            ApiResponse<SaaSposeResponse> localVarResponse = await DiagramFilePutCreateAsyncWithHttpInfo(name, folder, isOverwrite, storage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create new diagram and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DiagramFilePutCreateAsyncWithHttpInfo(string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFilePutCreate");

            var localVarPath = "/diagram/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFilePutCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Upload file and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse DiagramFilePutUpload(string localFilePath, string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            ApiResponse<SaaSposeResponse> localVarResponse = DiagramFilePutUploadWithHttpInfo(localFilePath, name, folder, isOverwrite, storage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload file and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse<SaaSposeResponse> DiagramFilePutUploadWithHttpInfo(string localFilePath, string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFilePutUpload");

            var localVarPath = "/diagram/{name}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            var localFileName = Path.GetFileName(localFilePath);
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Content-Type", "multipart/form-data");
            localVarHeaderParams.Add("Content-Disposition", "form-data; filename=\"" + localFileName + "\"");

            using (FileStream fs = new FileStream(localFilePath, FileMode.Open, FileAccess.Read))
            {
                byte[] buffer = new byte[fs.Length];
                fs.Read(buffer, 0, (int)fs.Length);
                localVarPostBody = buffer;
                //localVarFileParams.Add(name, FileParameter.Create(localFileName, buffer, localFilePath));
            }

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFilePutUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Upload file and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> DiagramFilePutUploadAsync(string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            ApiResponse<SaaSposeResponse> localVarResponse = await DiagramFilePutUploadAsyncWithHttpInfo(name, folder, isOverwrite, storage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Upload file and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Diagram.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="isOverwrite">If true overwrite the same name file.The default value is false. (optional, default to false)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DiagramFilePutUploadAsyncWithHttpInfo(string name, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DiagramFileApi->DiagramFilePutUpload");

            var localVarPath = "/diagram/{name}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiagramFilePutUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
